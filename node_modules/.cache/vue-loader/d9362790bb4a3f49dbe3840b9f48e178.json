{"remainingRequest":"D:\\softwares\\nvm\\v10.16.0\\node_global\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\myCode\\tree-components\\App.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\myCode\\tree-components\\App.vue","mtime":1568965131740},{"path":"D:\\softwares\\nvm\\v10.16.0\\node_global\\node_modules\\@vue\\cli-service-global\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"D:\\softwares\\nvm\\v10.16.0\\node_global\\node_modules\\@vue\\cli-service-global\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\softwares\\nvm\\v10.16.0\\node_global\\node_modules\\@vue\\cli-service-global\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n\r\nimport { getTreeList } from './api'\r\nimport MyTree from './MyTree'\r\nexport default {\r\n  data () {\r\n    return {      data: [],\r\n      fileDrop: [\r\n        { text: \"rm\", value: '删除文件' }\r\n      ],\r\n      diectoryDrops: [\r\n        { text: 'rn', value: '修改文件' },\r\n        { text: 'rm', value: '删除文件夹' }\r\n      ]\r\n    }\r\n  },\r\n  components: {\r\n    MyTree,\r\n  },\r\n  async mounted () {\r\n    let { data } = await getTreeList();\r\n    // console.log(data); //请求到接口数据\r\n    //1)扁平数据如何变成多层数据，递归数据\r\n    data.parent.forEach(p => p.type = 'parent')  //添加type属性\r\n    let AllData = [...data.parent, ...data.child]\r\n    // console.log(AllData)   //变成数组\r\n    this.data = AllData;\r\n  }\r\n\r\n}\r\n",{"version":3,"sources":["App.vue"],"names":[],"mappings":";;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"App.vue","sourceRoot":".","sourcesContent":["<template>\r\n  <div>\r\n    <My-Tree :dataList=\"data\" v-if=\"data.length\" :fileDrop=\"fileDrop\" :diectoryDrops=\"diectoryDrops\"></My-Tree>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { getTreeList } from './api'\r\nimport MyTree from './MyTree'\r\nexport default {\r\n  data () {\r\n    return {      data: [],\r\n      fileDrop: [\r\n        { text: \"rm\", value: '删除文件' }\r\n      ],\r\n      diectoryDrops: [\r\n        { text: 'rn', value: '修改文件' },\r\n        { text: 'rm', value: '删除文件夹' }\r\n      ]\r\n    }\r\n  },\r\n  components: {\r\n    MyTree,\r\n  },\r\n  async mounted () {\r\n    let { data } = await getTreeList();\r\n    // console.log(data); //请求到接口数据\r\n    //1)扁平数据如何变成多层数据，递归数据\r\n    data.parent.forEach(p => p.type = 'parent')  //添加type属性\r\n    let AllData = [...data.parent, ...data.child]\r\n    // console.log(AllData)   //变成数组\r\n    this.data = AllData;\r\n  }\r\n\r\n}\r\n</script>"]}]}